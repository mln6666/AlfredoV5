@model MinimercadoAlfredo.Models.Sale

@{
    ViewBag.Title = "Edición de Venta";
}
<style>input, select, textarea {
     max-width: inherit;
     width: 100%;
}</style>
<h3 class="text-center">Devoluciones de Venta</h3>
<hr style="color:grey;border-color:grey" />
@Html.HiddenFor(model => model.IdSale)
<table class="table table-striped table-bordered">
    <thead>
        <tr class="text-center" style="color:white; background-color:#4d77a3">
            <th style="width:110px">
                N° Venta
            </th>
            <th>
                Cliente
            </th>
            <th style="width:220px">
                Estado de Venta
            </th>
            <th style="width:170px">
                @Html.DisplayNameFor(model => model.SaleDate)
            </th>

        </tr>
    </thead>
    <tbody>
        <tr style="background-color: white">
            <td style="color: black">
                @Html.DisplayFor(model => model.IdSale)
            </td>
            <td>
                @Html.ActionLink((string)Model.Customer.CustomerName, "modalCustomer", new { id = Model.IdCustomer }, new { @class = "dialog-window" })
                @*@Html.DisplayFor(model => model.Provider.ProviderName)*@
            </td>
            <td style="color: black;font-weight: bold">
                @Html.DisplayFor(model => model.SaleState)
            </td>
            <td style="color: black">
                @Html.DisplayFor(model => model.SaleDate)
            </td>

        </tr>
    </tbody>
</table>
<h3 class="text-center">Lista de Productos</h3>
<hr style="color:grey;border-color:grey" />
<table class="table table-striped table-bordered" id="tabla">
    <thead>
        <tr class="text-center" style="color:white; background-color:#4d77a3">
            <td class="text-left" style="border-radius: 3px; width:120px">
                N° Art.
            </td>
            <td class="text-left" style="border-radius: 3px">
                Producto
            </td>
                        
            <td class="text-left" style="border-radius: 3px; width:100px">
                Cant.
            </td>
            <td class="text-left" style="border-radius: 3px; width:100px">
                Desc.
            </td>
            <td class="text-left" style="border-radius: 3px; width:100px">
                Precio M
            </td>
            <td class="text-left" style="border-radius: 3px; width:100px">
                Subtotal(+)
            </td>
            <td class="text-left" style="border-radius: 3px; width:100px">
                Dev
            </td>
            <td class="text-left" style="border-radius: 3px; width:100px">
                Total Dev(-)
            </td>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.SaleLines)
        {
            <tr style="background-color: white">
                @*<td style="color: black">*@
                <td>
                    @Html.DisplayFor(modelItem => item.Product.ProductNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Product.Trademark) - @Html.DisplayFor(modelItem => item.Product.ProductDescription)
                </td>
                                
                <td>
                    @*@Html.DisplayFor(modelItem => item.LineQuantity)*@
                    @Html.TextBoxFor(modelItem => item.LineQuantity, new {@Value = (item.LineQuantity == null) ? "0" : item.LineQuantity.ToString(), @id = "item_LineQuantity" + @item.IdProduct ,@readonly="readonly", style = "background: none;border:hidden;color: black" })
                </td>
                <td>
                    @Html.TextBoxFor(modelItem => item.LineDiscount, new { @Value = (item.LineDiscount == null) ? "0" : item.LineDiscount.ToString(), @id = "item_LineDiscount" + @item.IdProduct, @onchange = "totallinea(this.id)", @onkeypress = "solonumeros()", type = "tel", min = "0", step = "1", maxlength = "3", oninput = "javascript:if (this.value > 100) this.value = 100;totallinea(this.id)", style = "color: black" })
                    <span class="text-danger" id="@("spanitem_LineDiscount"+@item.IdProduct)"></span>
                </td>
                <td>
                    @Html.TextBoxFor(modelItem => item.LinePrice, new { @Value = (item.LinePrice == null) ? "0" : item.LinePrice.ToString(), @onchange = "totallinea(this.id)", @onkeypress = "solonumerosptocoma()", oninput = "totallinea(this.id)", @id = "item_LinePrice" + @item.IdProduct , style = "color: black" } )
                    <span class="text-danger" id="@("spanitem_LinePrice"+@item.IdProduct)"></span>

                </td>
                <td>
                    @Html.TextBoxFor(modelItem => item.LineTotal, new { @Value = (item.LineTotal == null) ? "0" : item.LineTotal.ToString(), @id = "item_LineTotal" + @item.IdProduct, @readonly = "readonly",style="background: none;border:hidden;font-weight: bold;color: black"})
                </td>
                <td>
                    @Html.TextBoxFor(modelItem => item.Return, new { @Value = (item.Return == null) ? "0" : item.Return.ToString(), @id = "item_Return" + @item.IdProduct, oninput = "totallinea(this.id)", @onkeypress = "solonumerosptocoma()", @onchange = "totallinea(this.id)", style = "color: black" })
                    <span class="text-danger" id="@("spanitem_Return"+@item.IdProduct)"></span>

                </td>
                <td>
                    @Html.TextBoxFor(modelItem => item.LineTotalReturn, new { @Value = (item.LineTotalReturn == null) ? "0" : item.LineTotalReturn.ToString(), @id = "item_LineTotalReturn" + @item.IdProduct, @readonly = "readonly", style = "background: none;border:hidden;font-weight: bold;color: black" })
                </td>
            </tr>
        }
        <tr style="background:none">
            <td style="border-right:hidden;border-left:hidden;border-bottom:hidden;"></td>
            <td style="border-right:hidden;border-left:hidden;border-bottom:hidden;"></td>
            <td style="border-right:hidden;border-left:hidden;border-bottom:hidden;"></td>
            <td style="border-right:hidden;border-left:hidden;border-bottom:hidden;"></td>
            <td style="border-left:hidden;border-bottom:hidden;"></td>
            <td style="color:black; font-weight: bolder; background-color:lightgray">
                @Html.TextBoxFor(model => model.LinesTotal, new { @Value = (Model.LinesTotal == null) ? "0" : Model.LinesTotal.ToString(), @readonly = "readonly", style = "background: none;border:hidden;font-weight: bolder;color: black" })
            </td>
            <td style="border-bottom:hidden;"></td>
            <td style="color:black; font-weight: bolder; background-color:lightgray">
                @Html.TextBoxFor(model => model.ReturnsTotal, new { @Value = (Model.ReturnsTotal == null) ? "0" : Model.ReturnsTotal.ToString(), @readonly = "readonly", style = "background: none;border:hidden;font-weight: bolder;color: black" })
            </td>
        </tr>
    </tbody>
</table>
<hr style="color:grey;border-color:grey" />

<table class="table table-striped table-bordered">
    <thead>
        <tr class="text-center" style="color:white; background-color:#4d77a3">
            <td class="text-left" style="border-radius: 3px">
                Comentarios
            </td>
            <td class="text-left" style="border-radius: 3px; width:200px">
                Total de Venta
            </td>
        </tr>
    </thead>
    <tbody>
        <tr style="background-color: white">
            <td>
                @Html.TextAreaFor(model => model.Comments, new { @Value = (Model.Comments == null) ? "0" : Model.Comments.ToString(),style="color: black" })
            </td>
            <td>
                @Html.TextBoxFor(model => model.SaleTotal, new { @Value = (Model.SaleTotal == null) ? "0" : Model.SaleTotal.ToString(), @readonly = "readonly",style="background: none;border:hidden;font-weight: bolder;color: black" })
            </td>
        </tr>
    </tbody>
</table>


<div class="text-center">
    @*<a href="@Url.Action("Index", "Sales")" class="btn btn-primary"><span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span> &nbsp; Volver</a>*@
    <input id="guardar" value="Guardar" class="btn btn-success" />
</div>

<div class="modal fade" id="myModal" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title text-center">Detalle de Cliente</h4>
            </div>
            <div class="modal-body">
                <div class="te">Espere...</div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script src="@Url.Content("~/Scripts/solonumerosptocoma.js")"></script>
    <script src="@Url.Content("~/Scripts/solonumeros.js")"></script>

    <script>

        //function requerido(a) {
        //    var b = a.replace(/\D/g, '');
        //    $("input[name='item.LineDiscount']").map(function () {
        //        if (this.value.trim() == "" || this.value == null) {
        //            $('#spanitem_LineDiscount' + b).text("Requerido");
        //            $('#spanitem_LineDiscount' + b).css('visibility', 'visible');
        //        } 
        //    });
        //}
       
    



        //////////////////Start: LineTotal Calculation//////////////

        function totallinea(a) {
            var b = a.replace(/\D/g, '');
            var price = parseFloat($('#item_LinePrice'+b).val());
            var quantity = parseFloat($('#item_LineQuantity'+b).val());
            var discount = parseFloat($('#item_LineDiscount' + b).val());
            var ret = parseFloat($('#item_Return' + b).val());
            var total = (price * quantity);
            total = total - (total * discount / 100);
            document.getElementById("item_LineTotal"+b).value = total.toFixed(2);

            var totaldevlinea = (price * ret);
            totaldevlinea = totaldevlinea - (totaldevlinea * discount / 100);
            document.getElementById('item_LineTotalReturn' + b).value = totaldevlinea.toFixed(2);

            var linestotal = 0;
            $("input[name='item.LineTotal']").map(function () { linestotal = linestotal + (parseFloat(this.value)) });
            document.getElementById("LinesTotal").value = linestotal.toFixed(2);

            var returnstotal = 0;
            $("input[name='item.LineTotalReturn']").map(function () { returnstotal = returnstotal + (parseFloat(this.value)) });
            document.getElementById("ReturnsTotal").value = returnstotal.toFixed(2);


            var totalgral = linestotal - returnstotal;
            document.getElementById("SaleTotal").value = totalgral.toFixed(2);

        }

        ////////////////////End: LineTotal Calculation/////////////


        $(document).ready(function() {

            //$("#tabla").DataTable({
            //    "language": {
            //        "url": "/Scripts/DataTables/spanish.json"
            //    }
            //});

            $("body").on("click", "a.dialog-window", null, function(e) {
                e.preventDefault();

                var $link = $(this); // Reference to <a/> link
                var title = $link.text(); //this is title to fetch in htnl
                $('#myModal.modal-title').html(title);

                var url = $(this).attr('href');
                if (url.indexOf('#') == 0) {
                    $('#myModal').modal('show');
                } else {
                    $.get(url, function(data) {
                        $('#myModal .te').html(data);
                        $('#myModal').modal();
                    }).success(function() { $('input:text:visible:first').focus(); });
                }
            });


//Guardar button click function
            $('#guardar').click(function () {
                
                var required = false;

                $("input[name='item.LineDiscount']").map(function () {
                    var a = this.id;
                    
                    var b = a.replace(/\D/g, '');
                    if (this.value.trim() == "" || this.value == null) {
                        $('#spanitem_LineDiscount' + b).text("Requerido");
                        required = true;
                    } else { $('#spanitem_LineDiscount' + b).text(""); }

                });

                $("input[name='item.LinePrice']").map(function () {
                    var a = this.id;

                    var b = a.replace(/\D/g, '');
                    if (this.value.trim() == "" || this.value == null) {
                        $('#spanitem_LinePrice' + b).text("Requerido");
                        required = true;
                    } else { $('#spanitem_LinePrice' + b).text(""); }

                });

                $("input[name='item.Return']").map(function () {
                    var a = this.id;

                    var b = a.replace(/\D/g, '');
                    if (this.value.trim() == "" || this.value == null) {
                        $('#spanitem_Return' + b).text("Requerido");
                        required = true;
                    } else { $('#spanitem_Return' + b).text(""); }

                });
                if (required) {

                    bootbox.alert({
                        title: "Aviso",
                        message: "Por favor complete todos los campos requeridos. ",
                        backdrop: true
                    });



                } else {
                    bootbox.confirm("** Está por confirmar las devoluciones y finalizar la compra, ¿Desea continuar?", function (result1) {
                        if (result1) {
                            var returns = [];
                            var linetotals = [];
                            var linediscounts = [];
                            var lineprices = [];
                            var linesretotals = [];
                            var ult = [];
                            $("input[name='item.LineTotalReturn']").map(function () { linesretotals.push(parseFloat(this.value)) });
                            $("input[name='item.Return']").map(function () { returns.push(parseFloat(this.value)) });
                            $("input[name='item.LineTotal']").map(function () { linetotals.push(parseFloat(this.value)) });
                            $("input[name='item.LinePrice']").map(function () { lineprices.push(parseFloat(this.value)) });
                            $("input[name='item.LineDiscount']").map(function () { linediscounts.push(parseFloat(this.value)) });


                            for (i = 0; i < returns.length; i++) {

                                ult.push({
                                    LinePrice: lineprices[i],
                                    LineDiscount: linediscounts[i],
                                    LineTotal: linetotals[i],
                                    Return: returns[i],
                                    LineTotalReturn: linesretotals[i]
                                });
                            }

                            var data = {
                                IdSale: $('#IdSale').val().trim(),
                                SaleTotal: $('#SaleTotal').val().trim(),
                                Comments: $('#Comments').val().trim(),
                                ReturnsTotal: $('#ReturnsTotal').val().trim(),
                                LinesTotal: $('#LinesTotal').val().trim(),
                                SaleLines: ult
                            }

                            $.ajax({
                                url: '@Url.Action("AddReturns", "Sales")',
                                type: "POST",
                                data: JSON.stringify(data),
                                dataType: "JSON",
                                contentType: "application/json",
                                success: function (d) {
                                    //check is successfully save to database
                                    if (d.status == true) {
                                        //will send status from server side
                                        //alert('SAPEEEEEEEEEEEEE.');
                                        bootbox.alert({
                                            message: "Edición correcta",
                                            callback: function (result) {
                                                //clear form
                                                //orderItems = [];
                                                //$('#customername').val('');
                                                //$('#saleaddress').val('');
                                                //$('#cuitcuil').val('');
                                                //$('#saledate').val('');
                                                //$('#comments').val('');
                                                //$('#salestate').val('0');

                                                //$('#orderItems').empty();
                                                var url = '@Url.Action("Details", "Sales", new {id = Model.IdSale})';
                                                window.location.href = url;
                                            }
                                        });


                                    } else {
                                        alert('No se permite la edición de una venta finalizada.');
                                    }
                                    $('#submit').val('Save');
                                },
                                error: function () {
                                    alert('Error. Please try again.');
                                    $('#submit').val('Save');
                                }
                            });


                        }
                    });
                };





              
            });

        });
    </script>
}































@*-------------- Edit GENERICO-----------------*@

@*@model MinimercadoAlfredo.Models.Sale

    @{
        ViewBag.Title = "Editar Venta";
    }

    <h2>Edit</h2>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Sale</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.IdSale)

            <div class="form-group">
                @Html.LabelFor(model => model.SaleDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SaleDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SaleDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SaleTotal, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SaleTotal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SaleTotal, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IdCustomer, "IdCustomer", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("IdCustomer", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IdCustomer, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@
