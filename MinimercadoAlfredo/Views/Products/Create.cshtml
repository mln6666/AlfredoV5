@model MinimercadoAlfredo.Models.Product

@{
    ViewBag.Title = "Create";
}

<h2 class="text-center">Agregar Producto</h2>
<hr style="color:grey;border-color:grey" />
<br />


@using (Html.BeginForm("Create", "Products", null, FormMethod.Post, new { id = "crearprod" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.idCategory, "Rubro", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("idCategory", null, "Seleccione un Rubro", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.idCategory, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductDescription, "Descripción", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductDescription, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })*@
                <span id="spandescexistente" style="color: red"></span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductNumber, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(model => model.ProductNumber, "", new { @class = "text-danger" })*@
                <span id="spanprodexistente" style="color: red"></span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cost, "Costo", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.WholeSalePrice, "Precio Mayorista", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.WholeSalePrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WholeSalePrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublicPrice, "Precio Minorista", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PublicPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PublicPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UploadDate, "Fecha de Carga", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UploadDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UploadDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Stock, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Minimum, "Stock Mínimo", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Minimum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Minimum, "El Sistema le avisará cuando el Stock de este Producto sea menor a este valor", new { @class = "text" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductState, "Estado", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="radio col-md-4">
                <label>
                    <input name="ProductState" id="optionsRadios1" value="true" checked="" type="radio">
                    Activo
                </label>
                <label>    </label>
                <label>
                    <input name="ProductState" id="optionsRadios2" value="false" type="radio">
                    Desactivado
                </label>
            </div>
            <div class="col-md-2"></div>

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Image, "Imagen", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div>
    <a href="@Url.Action("Index", "Products")" class="btn btn-primary">Volver</a>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $('#crearprod').submit(function (e) {
        var x = this;
        var y = true;
        e.preventDefault();
        var options = {};
        options.url = '@Url.Action("ExisteProd", "Products")';
        options.type = "GET";
        options.data = { "nombre": $("#ProductDescription").val() };
        options.dataType = "json";
        options.success = function (data) {
            if (data > 0) {
                $('#spandescexistente').text("* Ya existe un producto con esa descripción!");
                y = false;
            } else {
                if ($('#ProductDescription').val().trim() == '') {

                    $('#spandescexistente').text("* Campo requerido !");
                    y = false;
                } else {
                    $('#spandescexistente').text("");
                }
            }



        };
        $.ajax(options);

        e.preventDefault();
        var options = {};
        options.url = '@Url.Action("ExisteNro", "Products")';
        options.type = "GET";
        options.data = { "nombre": $("#ProductNumber").val() };
        options.dataType = "json";
        options.success = function (data) {
            if (data > 0) {
                $('#spanprodexistente').text("* Producto existente!");
                y = false;
            } else {
                if ($('#ProductNumber').val().trim() == '') {

                    $('#spanprodexistente').text("* Campo requerido!");
                    y = false;
                } else {
                    $('#spanprodexistente').text("");
                }
            }

            if (y) {
                bootbox.confirm("** Está por agregar un nuevo producto, ¿Desea continuar?", function (result) {
                    if (result) {
                        x.submit();
                    }
                });
            }


        };
        $.ajax(options);
    });
    </script>
}